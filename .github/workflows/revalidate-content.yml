# GitHub Actions 워크플로우 - 콘텐츠 변경 감지 및 서버 배포 알림
name: Content Revalidation and Deployment

on:
  push:
    branches: [main]
    paths:
      - 'content/posts/**/*.md'
      - 'content/pages/**/*.md'
  workflow_dispatch: # 수동 실행 가능

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            content/posts/**/*.md
            content/pages/**/*.md

      - name: Install jq
        if: steps.changed-files.outputs.any_changed == 'true'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: List changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "📝 Content files changed:"
          echo "All changed: ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Added: ${{ steps.changed-files.outputs.added_files }}"
          echo "Modified: ${{ steps.changed-files.outputs.modified_files }}"
          echo "Deleted: ${{ steps.changed-files.outputs.deleted_files }}"

      - name: Send webhook
        run: |
          echo "🔔 Sending webhook to server..."
          echo "📝 Environment variables verified"
          echo "🎯 Target URL: ${{ secrets.SERVER_WEBHOOK_URL }}"
          
          # 페이로드 생성 (삭제된 파일 정보 포함)
          PAYLOAD=$(jq -nc \
            --arg ref "refs/heads/main" \
            --arg repo_name "${{ github.repository }}" \
            --arg commit_id "${{ github.sha }}" \
            --arg message "Content update via GitHub Actions" \
            --argjson changed_files "$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -R 'split(" ")')" \
            --argjson added_files "$(echo '${{ steps.changed-files.outputs.added_files }}' | jq -R 'split(" ")')" \
            --argjson modified_files "$(echo '${{ steps.changed-files.outputs.modified_files }}' | jq -R 'split(" ")')" \
            --argjson deleted_files "$(echo '${{ steps.changed-files.outputs.deleted_files }}' | jq -R 'split(" ")')" \
            '{
              ref: $ref,
              repository: {
                name: $repo_name,
                full_name: $repo_name
              },
              commits: [{
                id: $commit_id,
                message: $message,
                added: $added_files,
                modified: $modified_files,
                removed: $deleted_files
              }],
              action: "content_update",
              changed_files: $changed_files,
              added_files: $added_files,
              modified_files: $modified_files,
              deleted_files: $deleted_files
            }'
          )
          
          echo "📦 Payload prepared:"
          echo "$PAYLOAD"
          
          # HMAC 서명 생성
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "${{ secrets.WEBHOOK_SECRET }}" | sed 's/^.* //')
          echo "🔐 Signature generated: sha256=$SIGNATURE"
          
          # 웹훅 전송 (타임아웃 설정 추가)
          echo "📡 Sending webhook..."
          RESPONSE=$(curl -s -w "%{http_code}" \
            --connect-timeout 10 \
            --max-time 30 \
            -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
            -d "$PAYLOAD" \
            "${{ secrets.SERVER_WEBHOOK_URL }}")
          
          # HTTP 상태 코드 추출
          HTTP_STATUS="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"
          
          echo "📊 HTTP Status: $HTTP_STATUS"
          echo "📄 Response:"
          echo "$RESPONSE_BODY"
          
          # 성공 여부 확인
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Webhook sent successfully"
          else
            echo "❌ Webhook failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

      - name: Deployment summary
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Changed files**: ${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected deploy time**: ~2-3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: https://greedient.kr" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Webhook sent to server" >> $GITHUB_STEP_SUMMARY
