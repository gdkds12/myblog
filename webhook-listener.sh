#!/bin/bash

# webhook-listener.sh - Ìò∏Ïä§Ìä∏ÏóêÏÑú Ïã§ÌñâÎêòÎäî GitHub ÏõπÌõÖ Î¶¨Ïä§ÎÑà
# Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî systemd ÏÑúÎπÑÏä§Î°ú Ïã§ÌñâÎêòÏñ¥ GitHub ÏõπÌõÖÏùÑ ÏàòÏã†ÌïòÍ≥† ÏûêÎèô Î∞∞Ìè¨Î•º Ï≤òÎ¶¨Ìï©ÎãàÎã§.

set -e

WEBHOOK_PORT=${WEBHOOK_PORT}
WEBHOOK_SECRET=${WEBHOOK_SECRET}
PROJECT_DIR=${PROJECT_DIR}
REVALIDATE_TOKEN=${REVALIDATE_TOKEN}

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# GitHub ÏõπÌõÖ ÏÑúÎ™Ö Í≤ÄÏ¶ù Ìï®Ïàò
verify_signature() {
    local payload="$1"
    local signature="$2"
    
    if [ -z "$WEBHOOK_SECRET" ]; then
        log "‚ö†Ô∏è WEBHOOK_SECRET not set, skipping signature verification"
        return 0
    fi
    
    local expected_signature=$(echo -n "$payload" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | sed 's/^.* //')
    local received_signature=$(echo "$signature" | sed 's/^sha256=//')
    
    if [ "$expected_signature" = "$received_signature" ]; then
        log "‚úÖ Signature verified"
        return 0
    else
        log "‚ùå Signature verification failed"
        return 1
    fi
}

# ÏõπÌõÖ Ìï∏Îì§Îü¨ Ìï®Ïàò
handle_webhook() {
    local request_body="$1"
    local signature="$2"
    
    log "üì¶ Webhook received"
    
    # ÏÑúÎ™Ö Í≤ÄÏ¶ù
    if ! verify_signature "$request_body" "$signature"; then
        echo "HTTP/1.1 401 Unauthorized"
        echo "Content-Type: application/json"
        echo ""
        echo '{"error": "Invalid signature"}'
        return
    fi
    
    # JSON ÌååÏã±ÏúºÎ°ú ref ÌôïÏù∏
    local ref=$(echo "$request_body" | jq -r '.ref // empty')
    
    if [ "$ref" != "refs/heads/main" ]; then
        log "‚ÑπÔ∏è Not main branch push, ignoring"
        echo "HTTP/1.1 200 OK"
        echo "Content-Type: application/json"
        echo ""
        echo '{"message": "Not main branch, ignored"}'
        return
    fi
    
    log "üîÑ Main branch push detected, starting deployment..."
    
    # ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
    cd "$PROJECT_DIR" || {
        log "‚ùå Failed to change to project directory: $PROJECT_DIR"
        echo "HTTP/1.1 500 Internal Server Error"
        echo "Content-Type: application/json"
        echo ""
        echo '{"error": "Project directory not found"}'
        return
    }
    
    # Git pull Ïã§Ìñâ
    log "üì• Pulling latest changes..."
    if git pull origin main; then
        log "‚úÖ Git pull successful"
    else
        log "‚ùå Git pull failed"
        echo "HTTP/1.1 500 Internal Server Error"
        echo "Content-Type: application/json"
        echo ""
        echo '{"error": "Git pull failed"}'
        return
    fi
    
    # Next.js Ï∫êÏãú Î¨¥Ìö®Ìôî ÏöîÏ≤≠
    log "‚ôªÔ∏è Triggering cache revalidation..."
    if curl -s -X POST \
        -H "Authorization: Bearer $REVALIDATE_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"paths": ["/", "/articles", "/docs"]}' \
        http://localhost:3000/api/revalidate > /dev/null; then
        log "‚úÖ Cache revalidation triggered"
    else
        log "‚ö†Ô∏è Cache revalidation failed (non-critical)"
    fi
    
    log "üéâ Deployment completed successfully"
    
    # ÏÑ±Í≥µ ÏùëÎãµ
    echo "HTTP/1.1 200 OK"
    echo "Content-Type: application/json"
    echo ""
    echo '{"success": true, "message": "Deployment completed"}'
}

# HTTP ÏÑúÎ≤Ñ ÏãúÏûë
log "üöÄ Starting webhook listener on port $WEBHOOK_PORT"
log "üìÅ Project directory: $PROJECT_DIR"

# socatÏùÑ ÏÇ¨Ïö©Ìïú Îçî ÏïàÏ†ïÏ†ÅÏù∏ HTTP ÏÑúÎ≤Ñ
if command -v socat &> /dev/null; then
    log "‚úÖ Using socat for HTTP server"
    while true; do
        echo -e "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: 56\r\nConnection: close\r\n\r\n{\"status\": \"Webhook listener is running\", \"port\": $WEBHOOK_PORT}" | socat TCP-LISTEN:$WEBHOOK_PORT,fork,reuseaddr STDIO
        sleep 0.1
    done
else
    log "‚ö†Ô∏è socat not found, installing..."
    # socat ÏÑ§Ïπò ÏãúÎèÑ
    if command -v apt &> /dev/null; then
        sudo apt update && sudo apt install -y socat
    elif command -v yum &> /dev/null; then
        sudo yum install -y socat
    fi
    
    # ÏÑ§Ïπò ÌõÑ Îã§Ïãú ÏãúÎèÑ
    if command -v socat &> /dev/null; then
        log "‚úÖ socat installed successfully"
        while true; do
            echo -e "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: 56\r\nConnection: close\r\n\r\n{\"status\": \"Webhook listener is running\", \"port\": $WEBHOOK_PORT}" | socat TCP-LISTEN:$WEBHOOK_PORT,fork,reuseaddr STDIO
            sleep 0.1
        done
    else
        log "‚ùå Failed to install socat, falling back to netcat"
        # Îã®ÏàúÌïú netcat Î≤ÑÏ†Ñ
        while true; do
            echo -e "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: 56\r\nConnection: close\r\n\r\n{\"status\": \"Webhook listener is running\", \"port\": $WEBHOOK_PORT}" | nc -l -p "$WEBHOOK_PORT" -q 1
            sleep 0.1
        done
    fi
fi
